import{s as o}from"./index-76169fad.js";const c={createOrder:async e=>{try{return(await o.post("/api/orders",e)).data}catch(r){throw console.error("Error creating order:",r),r}},getOrder:async e=>{try{return(await o.get(`/api/orders/${e}`)).data}catch(r){throw console.error("Error fetching order:",r),r}},getMyOrders:async(e={})=>{try{const r=new URLSearchParams;e.status&&r.append("status",e.status),e.page&&r.append("page",e.page),e.limit&&r.append("limit",e.limit);const t=r.toString(),s=t?`/api/orders/my?${t}`:"/api/orders/my";return(await o.get(s)).data}catch(r){throw console.error("Error fetching my orders:",r),r}},getHostOrders:async(e={})=>{try{const r=new URLSearchParams;e.status&&r.append("status",e.status),e.listingId&&r.append("listingId",e.listingId),e.page&&r.append("page",e.page),e.limit&&r.append("limit",e.limit);const t=r.toString(),s=t?`/api/orders/host?${t}`:"/api/orders/host";return(await o.get(s)).data}catch(r){throw console.error("Error fetching host orders:",r),r}},updateOrderStatus:async(e,r,t="")=>{try{return(await o.patch(`/api/orders/${e}/status`,{status:r,notes:t})).data}catch(s){throw console.error("Error updating order status:",s),s}},markPickup:async(e,r="")=>{try{return(await o.post(`/api/orders/${e}/pickup`,{notes:r})).data}catch(t){throw console.error("Error marking pickup:",t),t}},markReturn:async(e,r)=>{try{return(await o.post(`/api/orders/${e}/return`,r)).data}catch(t){throw console.error("Error marking return:",t),t}},cancelOrder:async(e,r="")=>{try{return(await o.post(`/api/orders/${e}/cancel`,{reason:r})).data}catch(t){throw console.error("Error cancelling order:",t),t}},initiateDispute:async(e,r)=>{try{return(await o.post(`/api/orders/${e}/dispute`,r)).data}catch(t){throw console.error("Error initiating dispute:",t),t}},addOrderMessage:async(e,r)=>{try{return(await o.post(`/api/orders/${e}/messages`,{message:r})).data}catch(t){throw console.error("Error adding order message:",t),t}},getOrderMessages:async e=>{try{return(await o.get(`/api/orders/${e}/messages`)).data}catch(r){throw console.error("Error fetching order messages:",r),r}},getOrderAnalytics:async(e={})=>{try{const r=new URLSearchParams;e.startDate&&r.append("startDate",e.startDate),e.endDate&&r.append("endDate",e.endDate),e.hostId&&r.append("hostId",e.hostId);const t=r.toString(),s=t?`/api/orders/analytics?${t}`:"/api/orders/analytics";return(await o.get(s)).data}catch(r){throw console.error("Error fetching order analytics:",r),r}},requestRefund:async(e,r)=>{try{return(await o.post(`/api/orders/${e}/refund`,r)).data}catch(t){throw console.error("Error requesting refund:",t),t}},processRefund:async(e,r)=>{try{return(await o.post(`/api/orders/${e}/process-refund`,r)).data}catch(t){throw console.error("Error processing refund:",t),t}},calculatePricing:async e=>{try{return(await o.post("/api/orders/calculate",e)).data}catch(r){throw console.error("Error calculating pricing:",r),r}},checkConflicts:async e=>{try{return(await o.post("/api/orders/check-conflicts",e)).data}catch(r){throw console.error("Error checking conflicts:",r),r}}};export{c as o};
