import{s as a}from"./index-76169fad.js";const s={createRazorpayOrder:async e=>{try{return(await a.post("/api/payments/create-order",e)).data}catch(t){throw console.error("Error creating Razorpay order:",t),t}},verifyPayment:async e=>{try{return(await a.post("/api/payments/verify",e)).data}catch(t){throw console.error("Error verifying payment:",t),t}},processMockPayment:async e=>{try{return(await a.post("/api/payments/mock",e)).data}catch(t){throw console.error("Error processing mock payment:",t),t}},getPaymentStatus:async e=>{try{return(await a.get(`/api/payments/${e}/status`)).data}catch(t){throw console.error("Error fetching payment status:",t),t}},getPaymentHistory:async(e={})=>{try{const t=new URLSearchParams;e.orderId&&t.append("orderId",e.orderId),e.startDate&&t.append("startDate",e.startDate),e.endDate&&t.append("endDate",e.endDate),e.status&&t.append("status",e.status),e.page&&t.append("page",e.page),e.limit&&t.append("limit",e.limit);const r=t.toString(),n=r?`/api/payments?${r}`:"/api/payments";return(await a.get(n)).data}catch(t){throw console.error("Error fetching payment history:",t),t}},processRefund:async(e,t)=>{try{return(await a.post(`/api/payments/${e}/refund`,t)).data}catch(r){throw console.error("Error processing refund:",r),r}},getRefundStatus:async e=>{try{return(await a.get(`/api/payments/refunds/${e}`)).data}catch(t){throw console.error("Error fetching refund status:",t),t}},capturePayment:async(e,t)=>{try{return(await a.post(`/api/payments/${e}/capture`,{amount:t})).data}catch(r){throw console.error("Error capturing payment:",r),r}},getHostEarnings:async(e={})=>{try{const t=new URLSearchParams;e.startDate&&t.append("startDate",e.startDate),e.endDate&&t.append("endDate",e.endDate),e.listingId&&t.append("listingId",e.listingId);const r=t.toString(),n=r?`/api/payments/host-earnings?${r}`:"/api/payments/host-earnings";return(await a.get(n)).data}catch(t){throw console.error("Error fetching host earnings:",t),t}},requestPayout:async e=>{try{return(await a.post("/api/payments/payout-request",e)).data}catch(t){throw console.error("Error requesting payout:",t),t}},getPayoutHistory:async(e={})=>{try{const t=new URLSearchParams;e.status&&t.append("status",e.status),e.page&&t.append("page",e.page),e.limit&&t.append("limit",e.limit);const r=t.toString(),n=r?`/api/payments/payouts?${r}`:"/api/payments/payouts";return(await a.get(n)).data}catch(t){throw console.error("Error fetching payout history:",t),t}},getWalletBalance:async()=>{try{return(await a.get("/api/payments/wallet/balance")).data}catch(e){throw console.error("Error fetching wallet balance:",e),e}},getWalletTransactions:async(e={})=>{try{const t=new URLSearchParams;e.type&&t.append("type",e.type),e.startDate&&t.append("startDate",e.startDate),e.endDate&&t.append("endDate",e.endDate),e.page&&t.append("page",e.page),e.limit&&t.append("limit",e.limit);const r=t.toString(),n=r?`/api/payments/wallet/transactions?${r}`:"/api/payments/wallet/transactions";return(await a.get(n)).data}catch(t){throw console.error("Error fetching wallet transactions:",t),t}},getPlatformFeesBreakdown:async e=>{try{return(await a.post("/api/payments/fees-breakdown",e)).data}catch(t){throw console.error("Error fetching platform fees breakdown:",t),t}}},p=s.getPayouts,i=s.processPayout;export{i as a,p as g,s as p};
